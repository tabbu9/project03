//stage 1 - check out the code from git 
//stage 2 - Build Docker Image from docker file 9 i have the docker file inside my git repo )
//stage 3 - Remove existing container if it is running 
//stage 4 - Run the new container from build image 
//stage 5 - Update the welcome page again from git to the container 
//stage 6 - Now Make container as image and tag it as latest (if any old image with tag latest delete it  ) 
//stage 7 - Check if any latest tag in docker hub , if find any latest tag in docker hub make that as sub version with 0.1 + sequence 
//stage 8 - Push current latest build from jenkins to docker hub 






pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'project03'
        DOCKER_HUB_REPO = 'tabbu93/project03'
        WELCOME_PAGE_PATH = './index.html' // Path to index.html in the repo
        CONTAINER_PATH = '/usr/share/nginx/html/index.html' // Nginx document root

        // ðŸ”´ Hardcoded Docker Hub Credentials (NOT RECOMMENDED)
        DOCKER_HUB_USER = 'tabbu93'
        DOCKER_HUB_PASS = 'SyedJaheed@9'
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    git branch: 'main', url: 'https://github.com/tabbu9/project03.git'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE}:latest ."
                }
            }
        }

        stage('Remove Existing Container') {
            steps {
                script {
                    sh "docker rm -f ${DOCKER_IMAGE} || true"
                }
            }
        }

        stage('Run New Container') {
            steps {
                script {
                    sh "docker run -d --name ${DOCKER_IMAGE} -p 80:80 ${DOCKER_IMAGE}:latest"
                }
            }
        }

        stage('Update Welcome Page') {
            steps {
                script {
                    sh "docker cp ${WELCOME_PAGE_PATH} ${DOCKER_IMAGE}:${CONTAINER_PATH}"
                }
            }
        }

        stage('Tag Image as Latest') {
            steps {
                script {
                    sh "docker rmi -f ${DOCKER_HUB_REPO}:latest || true"
                    sh "docker tag ${DOCKER_IMAGE}:latest ${DOCKER_HUB_REPO}:latest"
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    // ðŸ”´ Hardcoded login command (Not secure)
                    sh "echo '${DOCKER_HUB_PASS}' | docker login -u '${DOCKER_HUB_USER}' --password-stdin"
                    sh "docker push ${DOCKER_HUB_REPO}:latest"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
